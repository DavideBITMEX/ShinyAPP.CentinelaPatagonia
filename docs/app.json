[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\nlibrary(DT)\n\n ui <- fluidPage(\n   plotOutput(\"plot\", brush = \"plot_brush\"),\n   DTOutput(\"table\")\n )\n\n server <- function(input, output) {\n   output$plot <- renderPlot(\n     ggplot(mtcars) +\n       geom_point(aes(x = mpg, y = disp))\n   )\n   output$table <- renderDT({\n     brushedPoints(mtcars, input$plot_brush)\n   })\n }\n\n shinyApp(ui = ui, server = server)\n\n #run_app()\n","type":"text"},{"name":"app_config.R","content":"#' Access files in the current app\n#'\n#' NOTE: If you manually change your package name in the DESCRIPTION,\n#' don't forget to change it here too, and in the config file.\n#' For a safer name change mechanism, use the `golem::set_golem_name()` function.\n#'\n#' @param ... character vectors, specifying subdirectory and file(s)\n#' within your package. The default, none, returns the root of the app.\n#'\n#' @noRd\napp_sys <- function(...) {\n  system.file(..., package = \"ShinyAPP.CentinelaPatagonia\")\n}\n\n\n#' Read App Config\n#'\n#' @param value Value to retrieve from the config file.\n#' @param config GOLEM_CONFIG_ACTIVE value. If unset, R_CONFIG_ACTIVE.\n#' If unset, \"default\".\n#' @param use_parent Logical, scan the parent directory for config file.\n#' @param file Location of the config file\n#'\n#' @noRd\nget_golem_config <- function(\n  value,\n  config = Sys.getenv(\n    \"GOLEM_CONFIG_ACTIVE\",\n    Sys.getenv(\n      \"R_CONFIG_ACTIVE\",\n      \"default\"\n    )\n  ),\n  use_parent = TRUE,\n  # Modify this if your config file is somewhere else\n  file = app_sys(\"golem-config.yml\")\n) {\n  config::get(\n    value = value,\n    config = config,\n    file = file,\n    use_parent = use_parent\n  )\n}\n","type":"text"},{"name":"app_server.R","content":"#' The application server-side\n#'\n#' @param input,output,session Internal parameters for {shiny}.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\n# Define the Server Logic\napp_server <- function(input, output, session) {\n  # Reactive value to store the counter\n  counter <- reactiveVal(0)\n\n  # Increment counter when button is clicked\n  observeEvent(input$btn_counter, {\n    counter(counter() + 1)\n  })\n\n  # Display the counter value\n  output$counter <- renderText({\n    counter()\n  })\n}\n\n","type":"text"},{"name":"app_ui.R","content":"#' The application User-Interface\n#'\n#' @param request Internal parameter for `{shiny}`.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\n\nlibrary(golem)\nlibrary(shiny)\n\napp_ui <- function(request) {\n  tagList(\n    # Add external resources\n    golem_add_external_resources(),\n\n    # Application UI\n    fluidPage(\n      titlePanel(\"Simple Golem Shiny App\"),\n\n      sidebarLayout(\n        sidebarPanel(\n          actionButton(\"btn_counter\", \"Click me!\")\n        ),\n\n        mainPanel(\n          h3(\"Counter:\"),\n          textOutput(\"counter\")\n        )\n      )\n    )\n  )\n}\n\n#' Add external Resources to the Application\n#'\n#' This function is internally used to add external\n#' resources inside the Shiny application.\n#'\n#' @import shiny\n#' @importFrom golem add_resource_path activate_js favicon bundle_resources\n#' @noRd\ngolem_add_external_resources <- function() {\n  add_resource_path(\n    \"www\",\n    app_sys(\"app/www\")\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys(\"app/www\"),\n      app_title = \"ShinyAPP.CentinelaPatagonia\"\n    )\n    # Add here other external resources\n    # for example, you can add shinyalert::useShinyalert()\n  )\n}\n","type":"text"},{"name":"reial.R","content":"# library(usethis)\n# use_github()\n","type":"text"},{"name":"run_app.R","content":"#' Run the Shiny Application\n#'\n#' @param ... arguments to pass to golem_opts.\n#' See `?golem::get_golem_options` for more details.\n#' @inheritParams shiny::shinyApp\n#'\n#' @export\n#' @importFrom shiny shinyApp\n#' @importFrom golem with_golem_options\n\nlibrary(shinylive)\nlibrary(httpuv)\n\nrun_app <- function(\n  onStart = NULL,\n  options = list(),\n  enableBookmarking = NULL,\n  uiPattern = \"/\",\n  ...\n) {\n  with_golem_options(\n    app = shinyApp(\n      ui = app_ui,\n      server = app_server,\n      onStart = onStart,\n      options = options,\n      enableBookmarking = enableBookmarking,\n      uiPattern = uiPattern\n    ),\n    golem_opts = list(...)\n  )\n}\n","type":"text"}]
